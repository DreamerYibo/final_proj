// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file joint_6dofPubSubMain.cpp
 * This file acts as a main entry point to the application.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include "joint_6dofPublisher.h"
#include "joint_6dofSubscriber.h"
#include <vector>
#include <Eigen/Dense>
#include "EfortKine.h"

int main(
    int argc,
    char **argv)
{
    int type = 0;

    if (argc == 2)
    {
        if (strcmp(argv[1], "publisher") == 0)
        {
            type = 1;
        }
        else if (strcmp(argv[1], "subscriber") == 0)
        {
            type = 2;
        }
        else if (strcmp(argv[1], "pub_test") == 0)
        {
            type = 3;
        }
    }

    if (type == 0)
    {
        std::cout << "Error: Incorrect arguments." << std::endl;
        std::cout << "Usage: " << std::endl
                  << std::endl; //testcommit2
        std::cout << argv[0] << " publisher|subscriber" << std::endl
                  << std::endl;
        return 0;
    }

    std::cout << "Starting " << std::endl;

    // Register the type being used

    switch (type)
    {
    case 1:
    {
        joint_6dofPublisher mypub;
        if (mypub.init())
        {
            mypub.run();
        }
        break;
    }
    case 2:
    {
        joint_6dofSubscriber mysub;
        if (mysub.init())
        {
            mysub.run();
        }
        break;
    }
    case 3:
    {
        joint_6dofPublisher mypub;
        EfortRobo robo2("ER20");
        Eigen::MatrixXd joint_input(6, 1);
        joint_input << 1, 2, 3, 4, 5, 6;

        std::vector<Vec6d> traj_planning_result_cont; // clear it before each use of EfortKine::line_traj_planning()

        if (mypub.init())
        {
            PlanParam param;
            param.t0 = 0;
            param.tf = 5;
            param.samples_num = 500;

            Vec6d init_joint_pos;
            init_joint_pos << 1.0, 0.1, 0.1, 0.1, 0.2, 0.1;
            Eigen::Vector3d trans(0, 0, 100);

            double publish_sleep_time = (param.tf - param.t0) / (param.samples_num - 1.0) * 1000;
            bool cont_flag = 0;

            do
            {
                robo2.line_traj_planning(traj_planning_result_cont, init_joint_pos, trans, param);
                for (int i = 0; i < traj_planning_result_cont.size(); i++)
                {
                    joint_input = traj_planning_result_cont[i];
                    mypub.publish(joint_input, 2);
                    // joint_input(1) += 0.1;
                    std::this_thread::sleep_for(std::chrono::milliseconds((int)publish_sleep_time));
                }

                std::cout << "Want another translation?\n";
                std::cin >> cont_flag;
                if (cont_flag)
                {
                    init_joint_pos = traj_planning_result_cont.back();
                    traj_planning_result_cont.clear();
                    std::cout << "Please type trans x,y and z\n";
                    std::cin >> trans(0) >> trans(1) >> trans(2);
                }
            } while (cont_flag == 1);
        }
        break;
    }
    }

    return 0;
}
