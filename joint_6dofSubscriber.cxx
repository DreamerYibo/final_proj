// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file joint_6dofSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/SampleInfo.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>
#include <fastdds/dds/subscriber/qos/DataReaderQos.hpp>

#include "joint_6dofSubscriber.h"
#include "joint_6dofPubSubTypes.h"

using namespace eprosima::fastdds::dds;

joint_6dofSubscriber::joint_6dofSubscriber()
    : participant_(nullptr), subscriber_(nullptr), topic_(nullptr), reader_(nullptr), type_(new joint_6dofPubSubType())
{
    joint_pos_ptr = listener_.joint_pos; // TRY THIS.
    recieve_data_flag_ptr = &listener_.recieve_data_flag;
}

joint_6dofSubscriber::~joint_6dofSubscriber()
{
    if (reader_ != nullptr)
    {
        subscriber_->delete_datareader(reader_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    if (subscriber_ != nullptr)
    {
        participant_->delete_subscriber(subscriber_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool joint_6dofSubscriber::init()
{
    //CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.name("Participant_sub");
    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    if (participant_ == nullptr)
    {
        return false;
    }

    //REGISTER THE TYPE
    type_.register_type(participant_);

    //CREATE THE SUBSCRIBER
    subscriber_ = participant_->create_subscriber(SUBSCRIBER_QOS_DEFAULT, nullptr);
    if (subscriber_ == nullptr)
    {
        return false;
    }

    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "joint_6dofTopic",
        type_.get_type_name(),
        TOPIC_QOS_DEFAULT);
    if (topic_ == nullptr)
    {
        return false;
    }

    //CREATE THE READER
    DataReaderQos rqos = DATAREADER_QOS_DEFAULT;
    rqos.reliability().kind = RELIABLE_RELIABILITY_QOS;
    reader_ = subscriber_->create_datareader(topic_, rqos, &listener_);
    if (reader_ == nullptr)
    {
        return false;
    }

    return true;
}

void joint_6dofSubscriber::SubListener::on_subscription_matched(
    DataReader *,
    const SubscriptionMatchedStatus &info)
{
    if (info.current_count_change == 1)
    {
        matched = info.total_count;
        std::cout << "Subscriber matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        matched = info.total_count;
        std::cout << "Subscriber unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for SubscriptionMatchedStatus current count change" << std::endl;
    }
}

void joint_6dofSubscriber::SubListener::on_data_available(
    DataReader *reader)
{
    // Take data
    joint_6dof st;
    SampleInfo info;

    if (reader->take_next_sample(&st, &info) == ReturnCode_t::RETCODE_OK)
    {
        if (info.valid_data)
        {
            std::thread rcflag_thr(change_recieve_flag_val_thr, &recieve_data_flag, true);
            rcflag_thr.join();

            std::cout << "The rec flag is changed!\n";
            recieve_data_flag = 0;
            // Print your structure data here.
            // std::cout <<"NAME: " << st.joint_name() << "\n";
            // std::cout << "joint 1: " << st.joint_pos()[0] << "\n";
            // std::cout << "joint 2: " << st.joint_pos()[1] << "\n";
            // std::cout << "joint 3: " << st.joint_pos()[2] << "\n";
            // std::cout << "joint 4: " << st.joint_pos()[3] << "\n";
            // std::cout << "joint 5: " << st.joint_pos()[4] << "\n";
            // std::cout << "joint 6: " << st.joint_pos()[5] << "\n";
            // std::cout <<"________________________________\n";
            ++samples;
            std::cout << "Sample received, count=" << samples << std::endl;

            if (st.joint_name() == "robot1")
            {
                for (int i = 0; i < 6; i++)
                {
                    joint_pos[i] = st.joint_pos()[i];
                }
            }
            else if (st.joint_name() == "robot2")
            {
                for (int i = 6; i < 12; i++)
                {
                    joint_pos[i] = st.joint_pos()[i-6];
                }
            }
            else if (st.joint_name() == "robot3")
            {
                for (int i = 12; i < 18; i++)
                {
                    joint_pos[i] = st.joint_pos()[i-12];
                }
            }
            else
            {
                std::cout << "SUBSCRIBER: TOPIC st.joint_name() should be robot1 robot2 or robot3!\n";
            }

            // std::cout <<"NAME: " << st.joint_name() << "\n";
            // std::cout << "joint_pos[1]: " <<joint_pos[1] << "\n";
            // std::cout << "joint_pos[4]: " << joint_pos[4] << "\n";
            // std::cout << "joint_pos[5]: " <<joint_pos[5] << "\n";
            // std::cout << "joint_pos[12]: " << joint_pos[12] << "\n";
            // std::cout << "joint_pos[14]: " << joint_pos[14] << "\n";
            // std::cout << "joint_pos[17]: " << joint_pos[17]<< "\n";
            // std::cout <<"________________________________\n";
        }
    }
}

void joint_6dofSubscriber::run()
{
    std::cout << "Waiting for Data, press Enter to stop the DataReader. " << std::endl;
    std::cin.ignore();
    std::cout << "Shutting down the Subscriber." << std::endl;
}

void change_recieve_flag_val_thr(bool *rc_flag_ptr, bool input)
{
    static std::mutex mutex_temp;
    mutex_temp.lock();
    *rc_flag_ptr = input;
    mutex_temp.unlock();
    return;
};