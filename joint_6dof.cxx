// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file joint_6dof.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy; //s
}  // namespace
#endif  // _WIN32

#include "joint_6dof.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

joint_6dof::joint_6dof()
{
    // m_joint_name com.eprosima.idl.parser.typecode.StringTypeCode@30ee2816
    m_joint_name ="";
    // m_joint_pos com.eprosima.idl.parser.typecode.ArrayTypeCode@5c30a9b0
    memset(&m_joint_pos, 0, (6) * 8);

}

joint_6dof::~joint_6dof()
{


}

joint_6dof::joint_6dof(
        const joint_6dof& x)
{
    m_joint_name = x.m_joint_name;
    m_joint_pos = x.m_joint_pos;
}

joint_6dof::joint_6dof(
        joint_6dof&& x)
{
    m_joint_name = std::move(x.m_joint_name);
    m_joint_pos = std::move(x.m_joint_pos);
}

joint_6dof& joint_6dof::operator =(
        const joint_6dof& x)
{

    m_joint_name = x.m_joint_name;
    m_joint_pos = x.m_joint_pos;

    return *this;
}

joint_6dof& joint_6dof::operator =(
        joint_6dof&& x)
{

    m_joint_name = std::move(x.m_joint_name);
    m_joint_pos = std::move(x.m_joint_pos);

    return *this;
}

size_t joint_6dof::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += ((6) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t joint_6dof::getCdrSerializedSize(
        const joint_6dof& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.joint_name().size() + 1;

    if ((6) > 0)
    {
        current_alignment += ((6) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }


    return current_alignment - initial_alignment;
}

void joint_6dof::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_joint_name;
    scdr << m_joint_pos;


}

void joint_6dof::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_joint_name;
    dcdr >> m_joint_pos;

}

/*!
 * @brief This function copies the value in member joint_name
 * @param _joint_name New value to be copied in member joint_name
 */
void joint_6dof::joint_name(
        const std::string& _joint_name)
{
    m_joint_name = _joint_name;
}

/*!
 * @brief This function moves the value in member joint_name
 * @param _joint_name New value to be moved in member joint_name
 */
void joint_6dof::joint_name(
        std::string&& _joint_name)
{
    m_joint_name = std::move(_joint_name);
}

/*!
 * @brief This function returns a constant reference to member joint_name
 * @return Constant reference to member joint_name
 */
const std::string& joint_6dof::joint_name() const
{
    return m_joint_name;
}

/*!
 * @brief This function returns a reference to member joint_name
 * @return Reference to member joint_name
 */
std::string& joint_6dof::joint_name()
{
    return m_joint_name;
}
/*!
 * @brief This function copies the value in member joint_pos
 * @param _joint_pos New value to be copied in member joint_pos
 */
void joint_6dof::joint_pos(
        const std::array<double, 6>& _joint_pos)
{
    m_joint_pos = _joint_pos;
}

/*!
 * @brief This function moves the value in member joint_pos
 * @param _joint_pos New value to be moved in member joint_pos
 */
void joint_6dof::joint_pos(
        std::array<double, 6>&& _joint_pos)
{
    m_joint_pos = std::move(_joint_pos);
}

/*!
 * @brief This function returns a constant reference to member joint_pos
 * @return Constant reference to member joint_pos
 */
const std::array<double, 6>& joint_6dof::joint_pos() const
{
    return m_joint_pos;
}

/*!
 * @brief This function returns a reference to member joint_pos
 * @return Reference to member joint_pos
 */
std::array<double, 6>& joint_6dof::joint_pos()
{
    return m_joint_pos;
}

size_t joint_6dof::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool joint_6dof::isKeyDefined()
{
    return false;
}

void joint_6dof::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
